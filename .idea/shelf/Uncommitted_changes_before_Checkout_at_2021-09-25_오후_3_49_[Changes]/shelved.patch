Index: src/moon_lander/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package moon_lander;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.Point;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\n\r\n\r\nimport static moon_lander.Framework.*;\r\nimport static moon_lander.Framework.*;\r\n\r\n/**\r\n * Actual game.\r\n * \r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Game {\r\n\r\n    /**\r\n     * The space rocket with which player will have to land.\r\n     */\r\n    private PlayerRocket playerRocket;\r\n    \r\n    /**\r\n     * Landing area on which rocket will have to land.\r\n     */\r\n    private LandingArea landingArea;\r\n    \r\n    //적\r\n    private Enemy enemy1;\r\n    private Enemy enemy2;\r\n    private Enemy enemy3;\r\n    private Enemy enemy4;\r\n    private Enemy enemy5;\r\n\r\n    ArrayList<Enemy> enemies = new ArrayList<>();\r\n\r\n    /**\r\n     * Game background image.\r\n     */\r\n    private BufferedImage backgroundImg;\r\n    \r\n    /**\r\n     * Red border of the frame. It is used when player crash the rocket.\r\n     */\r\n    private BufferedImage redBorderImg;\r\n\r\n\r\n    public Game()\r\n    {\r\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\r\n        \r\n        Thread threadForInitGame = new Thread() {\r\n            @Override\r\n            public void run(){\r\n                // Sets variables and objects for the game.\r\n                Initialize();\r\n                // Load game files (images, sounds, ...)\r\n                LoadContent();\r\n\r\n\r\n                Framework.gameState = Framework.GameState.PLAYING;\r\n            }\r\n        };\r\n        threadForInitGame.start();\r\n    }\r\n    \r\n    \r\n   /**\r\n     * Set variables and objects for the game.\r\n     */\r\n    private void Initialize()\r\n    {\r\n        playerRocket = new PlayerRocket();\r\n        landingArea  = new LandingArea();\r\n        enemy1 = new Enemy();\r\n        enemy2 = new Enemy();\r\n        enemy3 = new Enemy();\r\n        enemy4 = new Enemy();\r\n        enemy5 = new Enemy();\r\n\r\n        enemies.add(enemy1);\r\n        enemies.add(enemy2);\r\n        enemies.add(enemy3);\r\n        enemies.add(enemy4);\r\n        enemies.add(enemy5);\r\n\r\n    }\r\n    \r\n    /**\r\n     * Load game files - images, sounds, ...\r\n     */\r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL backgroundImgUrl = this.getClass().getResource(\"/resources/images/background.jpg\");\r\n            backgroundImg = ImageIO.read(backgroundImgUrl);\r\n            \r\n            URL redBorderImgUrl = this.getClass().getResource(\"/resources/images/red_border.png\");\r\n            redBorderImg = ImageIO.read(redBorderImgUrl);\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Restart game - reset some variables.\r\n     */\r\n    public void RestartGame()\r\n    {\r\n        playerRocket.ResetPlayer();\r\n\r\n        for (Enemy enemy : this.enemies) {\r\n            enemy.ResetEnemy();\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update game logic.\r\n     * \r\n     * @param gameTime gameTime of the game.\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void UpdateGame(long gameTime, Point mousePosition)\r\n    {\r\n        // Move the rocket\r\n        playerRocket.Update();\r\n\r\n        // 적 생성\r\n        enemy1.Move();\r\n        enemy2.Move();\r\n        enemy3.Move();\r\n        enemy4.Move();\r\n        enemy5.Move();\r\n\r\n        for (Enemy enemy : this.enemies) {\r\n            enemy.Move();\r\n        }\r\n\r\n        // Checks where the player rocket is. Is it still in the space or is it landed or crashed?\r\n        // First we check bottom y coordinate of the rocket if is it near the landing area.\r\n        if(playerRocket.y + playerRocket.rocketImgHeight - 10 > landingArea.y)\r\n        {\r\n            // Here we check if the rocket is over landing area.\r\n            if((playerRocket.x > landingArea.x) && (playerRocket.x < landingArea.x + landingArea.landingAreaImgWidth - playerRocket.rocketImgWidth))\r\n            {\r\n                // Here we check if the rocket speed isn't too high.\r\n                if(playerRocket.speedY <= playerRocket.topLandingSpeed)\r\n                    playerRocket.landed = true;\r\n                else\r\n                    playerRocket.crashed = true;\r\n            }\r\n            else\r\n                playerRocket.crashed = true;\r\n\r\n            Framework.gameState = Framework.GameState.GAMEOVER;\r\n        }\r\n\r\n        if(Crash(this.playerRocket, this.enemies.get(1))){\r\n            this.playerRocket.crashed = true;\r\n            Framework.gameState = Framework.GameState.GAMEOVER;\r\n        }\r\n    }\r\n\r\n    public boolean Crash(PlayerRocket rocket, Enemy enemy){\r\n        boolean check = false;\r\n        if(Math.abs((rocket.x + rocket.rocketImgWidth / 2) - (enemy.x + enemy.enemyImgWidth / 2)) < (enemy.enemyImgWidth / 2 + rocket.rocketImgWidth / 2 ) &&\r\n                Math.abs((rocket.y + rocket.rocketImgHeight / 2 ) - (enemy.y + enemy.enemyImgHeight / 2 )) < (enemy.enemyImgWidth / 2 + rocket.rocketImgHeight / 2 ))\r\n            check = true;\r\n        return check;\r\n    }\r\n    \r\n    /**\r\n     * Draw the game to the screen.\r\n     * \r\n     * @param g2d Graphics2D\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void Draw(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        g2d.drawImage(backgroundImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        \r\n        landingArea.Draw(g2d);\r\n        \r\n        playerRocket.Draw(g2d);\r\n\r\n        for (Enemy enemy : this.enemies) {\r\n            enemy.Draw(g2d);\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the game over screen.\r\n     * \r\n     * @param g2d Graphics2D\r\n     * @param mousePosition Current mouse position.\r\n     * @param gameTime Game time in nanoseconds.\r\n     */\r\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition, long gameTime)\r\n    {\r\n        Draw(g2d, mousePosition);\r\n        \r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 100, Framework.frameHeight / 3 + 70);\r\n        \r\n        if(playerRocket.landed)\r\n        {\r\n            g2d.drawString(\"You have successfully landed!\", Framework.frameWidth / 2 - 100, Framework.frameHeight / 3);\r\n            g2d.drawString(\"You have landed in \" + gameTime / Framework.secInNanosec + \" seconds.\", Framework.frameWidth / 2 - 100, Framework.frameHeight / 3 + 20);\r\n        }\r\n        else\r\n        {\r\n            g2d.setColor(Color.red);\r\n            g2d.drawString(\"You have crashed the rocket!\", Framework.frameWidth / 2 - 95, Framework.frameHeight / 3);\r\n            g2d.drawImage(redBorderImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/moon_lander/Game.java b/src/moon_lander/Game.java
--- a/src/moon_lander/Game.java	(revision b5e22ac26f54c011fbdfa5630d12aafe3a2eb702)
+++ b/src/moon_lander/Game.java	(date 1632552403677)
@@ -32,6 +32,11 @@
      * Landing area on which rocket will have to land.
      */
     private LandingArea landingArea;
+
+    /**
+     * Bullet
+     */
+    private Bullet bullet;
     
     //적
     private Enemy enemy1;
@@ -73,13 +78,14 @@
     }
     
     
-   /**
+    /**
      * Set variables and objects for the game.
      */
     private void Initialize()
     {
         playerRocket = new PlayerRocket();
         landingArea  = new LandingArea();
+
         enemy1 = new Enemy();
         enemy2 = new Enemy();
         enemy3 = new Enemy();
@@ -92,6 +98,7 @@
         enemies.add(enemy4);
         enemies.add(enemy5);
 
+        bullet = new Bullet();
     }
     
     /**
@@ -136,7 +143,7 @@
     {
         // Move the rocket
         playerRocket.Update();
-
+        bullet.Update();
         // 적 생성
         enemy1.Move();
         enemy2.Move();
@@ -199,9 +206,7 @@
             enemy.Draw(g2d);
         }
 
-
-
-
+        bullet.Draw(g2d);
     }
     
     
@@ -230,4 +235,8 @@
             g2d.drawImage(redBorderImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);
         }
     }
+
+    public void setBullet(Bullet bullet) {
+        this.bullet = bullet;
+    }
 }
Index: src/moon_lander/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package moon_lander;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.Point;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\n\r\n/**\r\n * Framework that controls the game (Game.java) that created it, update it and draw it on the screen.\r\n * \r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Framework extends Canvas {\r\n    \r\n    /**\r\n     * Width of the frame.\r\n     */\r\n    public static int frameWidth;\r\n    /**\r\n     * Height of the frame.\r\n     */\r\n    public static int frameHeight;\r\n\r\n    /**\r\n     * Time of one second in nanoseconds.\r\n     * 1 second = 1 000 000 000 nanoseconds\r\n     */\r\n    public static final long secInNanosec = 1000000000L;\r\n    \r\n    /**\r\n     * Time of one millisecond in nanoseconds.\r\n     * 1 millisecond = 1 000 000 nanoseconds\r\n     */\r\n    public static final long milisecInNanosec = 1000000L;\r\n    \r\n    /**\r\n     * FPS - Frames per second\r\n     * How many times per second the game should update?\r\n     */\r\n    private final int GAME_FPS = 16;\r\n    /**\r\n     * Pause between updates. It is in nanoseconds.\r\n     */\r\n    private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;\r\n    \r\n    /**\r\n     * Possible states of the game\r\n     */\r\n    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING, MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, DESTROYED}\r\n    /**\r\n     * Current state of the game\r\n     */\r\n    public static GameState gameState;\r\n    \r\n    /**\r\n     * Elapsed game time in nanoseconds.\r\n     */\r\n    private long gameTime;\r\n    // It is used for calculating elapsed time.\r\n    private long lastTime;\r\n    \r\n    // The actual game\r\n    private Game game;\r\n    \r\n    \r\n    /**\r\n     * Image for menu.\r\n     */\r\n    private BufferedImage moonLanderMenuImg;\r\n    \r\n    \r\n    public Framework ()\r\n    {\r\n        super();\r\n        \r\n        gameState = GameState.VISUALIZING;\r\n        \r\n        //We start game in new thread.\r\n        Thread gameThread = new Thread() {\r\n            @Override\r\n            public void run(){\r\n                GameLoop();\r\n            }\r\n        };\r\n        gameThread.start();\r\n    }\r\n    \r\n    \r\n   /**\r\n     * Set variables and objects.\r\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in Game.java.\r\n     */\r\n    private void Initialize()\r\n    {\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Load files - images, sounds, ...\r\n     * This method is intended to load files for this class, files for the actual game can be loaded in Game.java.\r\n     */\r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL moonLanderMenuImgUrl = this.getClass().getResource(\"/resources/images/menu.jpg\");\r\n            moonLanderMenuImg = ImageIO.read(moonLanderMenuImgUrl);\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\r\n     */\r\n    private void GameLoop()\r\n    {\r\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\r\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\r\n        \r\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n        long beginTime, timeTaken, timeLeft;\r\n        \r\n        while(true)\r\n        {\r\n            beginTime = System.nanoTime();\r\n            \r\n            switch (gameState)\r\n            {\r\n                case PLAYING:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    \r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    \r\n                    lastTime = System.nanoTime();\r\n                break;\r\n                case GAMEOVER:\r\n                    //...\r\n                break;\r\n                case MAIN_MENU:\r\n                    //...\r\n                break;\r\n                case OPTIONS:\r\n                    //...\r\n                break;\r\n                case GAME_CONTENT_LOADING:\r\n                    //...\r\n                break;\r\n                case STARTING:\r\n                    // Sets variables and objects.\r\n                    Initialize();\r\n                    // Load files - images, sounds, ...\r\n                    LoadContent();\r\n\r\n                    // When all things that are called above finished, we change game status to main menu.\r\n                    gameState = GameState.MAIN_MENU;\r\n                break;\r\n                case VISUALIZING:\r\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px). \r\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\r\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\r\n                    // so that we although get approximately size.\r\n                    if(this.getWidth() > 1 && visualizingTime > secInNanosec)\r\n                    {\r\n                        frameWidth = this.getWidth();\r\n                        frameHeight = this.getHeight();\r\n\r\n                        // When we get size of frame we change status.\r\n                        gameState = GameState.STARTING;\r\n                    }\r\n                    else\r\n                    {\r\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\r\n                        lastVisualizingTime = System.nanoTime();\r\n                    }\r\n                break;\r\n            }\r\n            \r\n            // Repaint the screen.\r\n            repaint();\r\n            \r\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n            timeTaken = System.nanoTime() - beginTime;\r\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds\r\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\r\n            if (timeLeft < 10) \r\n                timeLeft = 10; //set a minimum\r\n            try {\r\n                 //Provides the necessary delay and also yields control so that other thread can do work.\r\n                 Thread.sleep(timeLeft);\r\n            } catch (InterruptedException ex) { }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Draw the game to the screen. It is called through repaint() method in GameLoop() method.\r\n     */\r\n    @Override\r\n    public void Draw(Graphics2D g2d)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case PLAYING:\r\n                game.Draw(g2d, mousePosition());\r\n            break;\r\n            case GAMEOVER:\r\n                game.DrawGameOver(g2d, mousePosition(), gameTime);\r\n            break;\r\n            case MAIN_MENU:\r\n                g2d.drawImage(moonLanderMenuImg, 0, 0, frameWidth, frameHeight, null);\r\n                g2d.setColor(Color.white);\r\n                g2d.drawString(\"Use w a d keys to controle the rocket.\", frameWidth / 2 - 117, frameHeight / 2);\r\n                g2d.drawString(\"Press any key to start the game.\", frameWidth / 2 - 100, frameHeight / 2 + 30);\r\n                g2d.drawString(\"WWW.GAMETUTORIAL.NET\", 7, frameHeight - 5);\r\n            break;\r\n            case OPTIONS:\r\n                //...\r\n            break;\r\n            case GAME_CONTENT_LOADING:\r\n                g2d.setColor(Color.white);\r\n                g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\r\n            break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Starts new game.\r\n     */\r\n    private void newGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        \r\n        game = new Game();\r\n    }\r\n    \r\n    /**\r\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\r\n     */\r\n    private void restartGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        \r\n        game.RestartGame();\r\n        \r\n        // We change game status so that the game can start.\r\n        gameState = GameState.PLAYING;\r\n    }\r\n    \r\n    /**\r\n     * Returns the position of the mouse pointer in game frame/window.\r\n     * If mouse position is null than this method return 0,0 coordinate.\r\n     * \r\n     * @return Point of mouse coordinates.\r\n     */\r\n    private Point mousePosition()\r\n    {\r\n        try\r\n        {\r\n            Point mp = this.getMousePosition();\r\n            \r\n            if(mp != null)\r\n                return this.getMousePosition();\r\n            else\r\n                return new Point(0, 0);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return new Point(0, 0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method is called when keyboard key is released.\r\n     * \r\n     * @param e KeyEvent\r\n     */\r\n    @Override\r\n    public void keyReleasedFramework(KeyEvent e)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case MAIN_MENU:\r\n                newGame();\r\n            break;\r\n            case GAMEOVER:\r\n                if(e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER)\r\n                    restartGame();\r\n            break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method is called when mouse button is clicked.\r\n     * \r\n     * @param e MouseEvent\r\n     */\r\n    @Override\r\n    public void mouseClicked(MouseEvent e)\r\n    {\r\n        \r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/moon_lander/Framework.java b/src/moon_lander/Framework.java
--- a/src/moon_lander/Framework.java	(revision b5e22ac26f54c011fbdfa5630d12aafe3a2eb702)
+++ b/src/moon_lander/Framework.java	(date 1632552043764)
@@ -94,7 +94,7 @@
     }
     
     
-   /**
+    /**
      * Set variables and objects.
      * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in Game.java.
      */
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e3f656b9-1a17-4bfb-87a9-9e74f5a9bcf9\" name=\"Changes\" comment=\"second init\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/bin/moon_lander/Framework.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bin/moon_lander/Framework.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/bin/moon_lander/Game$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bin/moon_lander/Game$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/bin/moon_lander/Game.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bin/moon_lander/Game.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/bin/moon_lander/LandingArea.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bin/moon_lander/LandingArea.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/bin/moon_lander/PlayerRocket.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bin/moon_lander/PlayerRocket.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/moon_lander/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/moon_lander/Game.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/master\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedIndex\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1yFslKDIUyE2MrOp5KuNlD3UOL4\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\r\n    <property name=\"LombokPluginIS_ANNOTATION_PROCESSING_CHECK_Enabled\" value=\"true\" />\r\n    <property name=\"LombokPluginIS_LOMBOK_VERSION_CHECK_Enabled\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"Lombok\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"moon_lander\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"JavaSE-1.7\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"moon_lander.Window\" />\r\n      <module name=\"moon_lander\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e3f656b9-1a17-4bfb-87a9-9e74f5a9bcf9\" name=\"Changes\" comment=\"\" />\r\n      <created>1631858827523</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1631858827523</updated>\r\n      <workItem from=\"1631858828794\" duration=\"135000\" />\r\n      <workItem from=\"1631863748401\" duration=\"2704000\" />\r\n      <workItem from=\"1632046973246\" duration=\"1880000\" />\r\n      <workItem from=\"1632049349525\" duration=\"418000\" />\r\n      <workItem from=\"1632049798890\" duration=\"567000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1212\">\r\n      <created>1631864883681</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1631864883681</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"코드 리뷰 파일 추가\">\r\n      <created>1631865075788</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1631865075788</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"kiku/master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"1212\" />\r\n    <MESSAGE value=\"코드 리뷰 파일 추가\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"코드 리뷰 파일 추가\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b5e22ac26f54c011fbdfa5630d12aafe3a2eb702)
+++ b/.idea/workspace.xml	(date 1632552043845)
@@ -1,14 +1,24 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
     <list default="true" id="e3f656b9-1a17-4bfb-87a9-9e74f5a9bcf9" name="Changes" comment="second init">
+      <change afterPath="$PROJECT_DIR$/src/moon_lander/Bullet.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bin/moon_lander/Framework.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/moon_lander/Framework.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bin/moon_lander/Game$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/moon_lander/Game$1.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bin/moon_lander/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/moon_lander/Game.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bin/moon_lander/LandingArea.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/moon_lander/LandingArea.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bin/moon_lander/PlayerRocket.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/moon_lander/PlayerRocket.class" afterDir="false" />
+<<<<<<< HEAD
+=======
+      <change beforePath="$PROJECT_DIR$/src/moon_lander/Framework.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/moon_lander/Framework.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/moon_lander/Enemy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/moon_lander/Enemy.java" afterDir="false" />
+>>>>>>> test
       <change beforePath="$PROJECT_DIR$/src/moon_lander/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/moon_lander/Game.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/moon_lander/PlayerRocket.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/moon_lander/PlayerRocket.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -19,6 +29,7 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="HTML File" />
+        <option value="Class" />
       </list>
     </option>
   </component>
@@ -28,8 +39,43 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+<<<<<<< HEAD
   <component name="ProblemsViewState">
     <option name="selectedIndex" value="1" />
+=======
+  <component name="GitToolBoxStore">
+    <option name="recentBranches">
+      <RecentBranches>
+        <option name="branchesForRepo">
+          <list>
+            <RecentBranchesForRepo>
+              <option name="branches">
+                <list>
+                  <RecentBranch>
+                    <option name="branchName" value="test" />
+                    <option name="lastUsedInstant" value="1632379247" />
+                  </RecentBranch>
+                  <RecentBranch>
+                    <option name="branchName" value="master" />
+                    <option name="lastUsedInstant" value="1632378403" />
+                    <option name="lastUsedInstant" value="1632399726" />
+                  </RecentBranch>
+                  <RecentBranch>
+                    <option name="branchName" value="master" />
+                    <option name="lastUsedInstant" value="1632399725" />
+                  </RecentBranch>
+                </list>
+              </option>
+              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
+            </RecentBranchesForRepo>
+          </list>
+        </option>
+      </RecentBranches>
+    </option>
+>>>>>>> test
+  </component>
+  <component name="ProblemsViewState">
+    <option name="selectedIndex" value="2" />
   </component>
   <component name="ProjectId" id="1yFslKDIUyE2MrOp5KuNlD3UOL4" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
@@ -48,7 +94,11 @@
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="aspect.path.notification.shown" value="true" />
     <property name="last_opened_file_path" value="$PROJECT_DIR$" />
+    <property name="node.js.detected.package.eslint" value="true" />
+    <property name="node.js.selected.package.eslint" value="(autodetect)" />
+    <property name="node.js.selected.package.tslint" value="(autodetect)" />
     <property name="nodejs_package_manager_path" value="npm" />
+    <property name="run.code.analysis.last.selected.profile" value="pProject Default" />
     <property name="settings.editor.selected.configurable" value="Lombok" />
   </component>
   <component name="RunManager">
@@ -75,6 +125,12 @@
       <workItem from="1632046973246" duration="1880000" />
       <workItem from="1632049349525" duration="418000" />
       <workItem from="1632049798890" duration="567000" />
+      <workItem from="1632381301584" duration="2089000" />
+      <workItem from="1632394353786" duration="880000" />
+      <workItem from="1632398763973" duration="3036000" />
+      <workItem from="1632463744538" duration="5142000" />
+      <workItem from="1632474555888" duration="2423000" />
+      <workItem from="1632547731609" duration="1019000" />
     </task>
     <task id="LOCAL-00001" summary="1212">
       <created>1631864883681</created>
Index: src/moon_lander/PlayerRocket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package moon_lander;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.Random;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\n\r\n/**\r\n * The space rocket with which player will have to land.\r\n * \r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class PlayerRocket {\r\n    \r\n    /**\r\n     * We use this to generate a random number for starting x coordinate of the rocket.\r\n     */\r\n    private Random random;\r\n    /**\r\n     * X coordinate of the rocket.\r\n     */\r\n    public int x;\r\n    /**\r\n     * Y coordinate of the rocket.\r\n     */\r\n    public int y;\r\n    \r\n    /**\r\n     * Is rocket landed?\r\n     */\r\n    public boolean landed;\r\n    \r\n    /**\r\n     * Has rocket crashed?\r\n     */\r\n    public boolean crashed;\r\n        \r\n    /**\r\n     * Accelerating speed of the rocket.\r\n     */\r\n    private int speedAccelerating;\r\n    /**\r\n     * Stopping/Falling speed of the rocket. Falling speed because, the gravity pulls the rocket down to the moon.\r\n     */\r\n    private int speedStopping;\r\n    \r\n    /**\r\n     * Maximum speed that rocket can have without having a crash when landing.\r\n     */\r\n    public int topLandingSpeed;\r\n    \r\n    /**\r\n     * How fast and to which direction rocket is moving on x coordinate?\r\n     */\r\n    private int speedX;\r\n    /**\r\n     * How fast and to which direction rocket is moving on y coordinate?\r\n     */\r\n    public int speedY;\r\n    //로켓 내구도\r\n    public int hp;\r\n    /**\r\n     * Image of the rocket in air.\r\n     */\r\n    private BufferedImage rocketImg;\r\n    /**\r\n     * Image of the rocket when landed.\r\n     */\r\n    private BufferedImage rocketLandedImg;\r\n    /**\r\n     * Image of the rocket when crashed.\r\n     */\r\n    private BufferedImage rocketCrashedImg;\r\n    /**\r\n     * Image of the rocket fire.\r\n     */\r\n    private BufferedImage rocketFireImg;\r\n    \r\n    /**\r\n     * Width of rocket.\r\n     */\r\n    public int rocketImgWidth;\r\n    /**\r\n     * Height of rocket.\r\n     */\r\n    public int rocketImgHeight;\r\n    \r\n    \r\n    public PlayerRocket()\r\n    {\r\n        Initialize();\r\n        LoadContent();\r\n        \r\n        // Now that we have rocketImgWidth we set starting x coordinate.\r\n        x = random.nextInt(Framework.frameWidth - rocketImgWidth);\r\n    }\r\n    \r\n    \r\n    private void Initialize()\r\n    {\r\n        random = new Random();\r\n        \r\n        ResetPlayer();\r\n        \r\n        speedAccelerating = 2;\r\n        speedStopping = 1;\r\n        \r\n        topLandingSpeed = 5;\r\n\r\n        this.hp = 10;\r\n    }\r\n    \r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL rocketImgUrl = this.getClass().getResource(\"/resources/images/rocket.png\");\r\n            rocketImg = ImageIO.read(rocketImgUrl);\r\n            rocketImgWidth = rocketImg.getWidth();\r\n            rocketImgHeight = rocketImg.getHeight();\r\n            \r\n            URL rocketLandedImgUrl = this.getClass().getResource(\"/resources/images/rocket_landed.png\");\r\n            rocketLandedImg = ImageIO.read(rocketLandedImgUrl);\r\n            \r\n            URL rocketCrashedImgUrl = this.getClass().getResource(\"/resources/images/rocket_crashed.png\");\r\n            rocketCrashedImg = ImageIO.read(rocketCrashedImgUrl);\r\n            \r\n            URL rocketFireImgUrl = this.getClass().getResource(\"/resources/images/rocket_fire.png\");\r\n            rocketFireImg = ImageIO.read(rocketFireImgUrl);\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(PlayerRocket.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Here we set up the rocket when we starting a new game.\r\n     */\r\n    public void ResetPlayer()\r\n    {\r\n        landed = false;\r\n        crashed = false;\r\n        \r\n        x = random.nextInt(Framework.frameWidth - rocketImgWidth);\r\n        y = 10;\r\n        \r\n        speedX = 0;\r\n        speedY = 0;\r\n\r\n        this.hp = 10;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Here we move the rocket.\r\n     */\r\n    public void Update()\r\n    {\r\n        // Calculating speed for moving up or down.\r\n        if(Canvas.keyboardKeyState(KeyEvent.VK_W) || Canvas.mouseButtonState(MouseEvent.BUTTON2))\r\n            speedY -= speedAccelerating;\r\n        else\r\n            speedY += speedStopping;\r\n        \r\n        // Calculating speed for moving or stopping to the left.\r\n        if(Canvas.keyboardKeyState(KeyEvent.VK_A) || Canvas.mouseButtonState(MouseEvent.BUTTON1))\r\n            speedX -= speedAccelerating;\r\n        else if(speedX < 0)\r\n            speedX += speedStopping;\r\n        \r\n        // Calculating speed for moving or stopping to the right.\r\n        if(Canvas.keyboardKeyState(KeyEvent.VK_D) || Canvas.mouseButtonState(MouseEvent.BUTTON3))\r\n            speedX += speedAccelerating;\r\n        else if(speedX > 0)\r\n            speedX -= speedStopping;\r\n        \r\n        // Moves the rocket.\r\n        x += speedX;\r\n        y += speedY;\r\n    }\r\n    \r\n    public void Draw(Graphics2D g2d)\r\n    {\r\n        g2d.setColor(Color.white);\r\n        g2d.drawString(\"Rocket coordinates: \" + x + \" : \" + y, 5, 15);\r\n        \r\n        // If the rocket is landed.\r\n        if(landed)\r\n        {\r\n            g2d.drawImage(rocketLandedImg, x, y, null);\r\n        }\r\n        // If the rocket is crashed.\r\n        else if(crashed)\r\n        {\r\n            g2d.drawImage(rocketCrashedImg, x, y + rocketImgHeight - rocketCrashedImg.getHeight(), null);\r\n        }\r\n        // If the rocket is still in the space.\r\n        else\r\n        {\r\n            // If player hold down a W key we draw rocket fire.\r\n            if(Canvas.keyboardKeyState(KeyEvent.VK_W)|| Canvas.mouseButtonState(MouseEvent.BUTTON2))\r\n                g2d.drawImage(rocketFireImg, x + 12, y + 66, null);\r\n            g2d.drawImage(rocketImg, x, y, null);\r\n        }\r\n    }\r\n    \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/moon_lander/PlayerRocket.java b/src/moon_lander/PlayerRocket.java
--- a/src/moon_lander/PlayerRocket.java	(revision b5e22ac26f54c011fbdfa5630d12aafe3a2eb702)
+++ b/src/moon_lander/PlayerRocket.java	(date 1632552043811)
@@ -19,7 +19,7 @@
  */
 
 public class PlayerRocket {
-    
+
     /**
      * We use this to generate a random number for starting x coordinate of the rocket.
      */
@@ -27,11 +27,11 @@
     /**
      * X coordinate of the rocket.
      */
-    public int x;
+    public static int x;
     /**
      * Y coordinate of the rocket.
      */
-    public int y;
+    public static int y;
     
     /**
      * Is rocket landed?
@@ -87,7 +87,7 @@
     /**
      * Width of rocket.
      */
-    public int rocketImgWidth;
+    public static int rocketImgWidth;
     /**
      * Height of rocket.
      */
